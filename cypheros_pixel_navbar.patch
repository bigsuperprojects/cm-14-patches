diff --git a/packages/ExternalStorageProvider/res/values-ug/strings.xml b/packages/ExternalStorageProvider/res/values-ug/strings.xml
index 558b484..a1d64a4 100644
--- a/packages/ExternalStorageProvider/res/values-ug/strings.xml
+++ b/packages/ExternalStorageProvider/res/values-ug/strings.xml
@@ -21,4 +21,19 @@
   <string name="root_internal_storage">ئىچىدىكى ساقلىغۇچ</string>
   <!-- Title for directory in which a user may store their own documents and files. [CHAR LIMIT=24] -->
   <string name="root_documents">پۈتۈكلەر</string>
+	
+	<!-- Animated Nav Dimens -->
+    <dimen name="halo_inner_radius">10.0dip</dimen>
+    <dimen name="halo_thickness">1.0dip</dimen>
+    <dimen name="halo_diameter">22.0dip</dimen>
+    <dimen name="opa_dot_diam">10.0dip</dimen>
+    <dimen name="opa_diamond_translation">16.0dip</dimen>
+    <dimen name="opa_line_y_translation">16.0dip</dimen>
+    <dimen name="opa_line_x_trans_ry">15.0dip</dimen>
+    <dimen name="opa_line_x_trans_bg">30.0dip</dimen>
+    <dimen name="opa_line_x_collapse_bg">46.0dip</dimen>
+    <dimen name="opa_line_x_collapse_ry">15.0dip</dimen>
+    <dimen name="opa_overshoot_translation">8.0dip</dimen>
+    <dimen name="opa_return_translation">-1.0dip</dimen>
+    <dimen name="opa_rest_to_collapse">7.0dip</dimen>
 </resources>
diff --git a/packages/SystemUI/res/drawable-hdpi/ic_sysbar_back.png b/packages/SystemUI/res/drawable-hdpi/ic_sysbar_back.png
deleted file mode 100644
index aa9f6d4..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/ic_sysbar_back.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/ic_sysbar_back_ime.png b/packages/SystemUI/res/drawable-hdpi/ic_sysbar_back_ime.png
deleted file mode 100644
index 151caea..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/ic_sysbar_back_ime.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/ic_sysbar_home.png b/packages/SystemUI/res/drawable-hdpi/ic_sysbar_home.png
deleted file mode 100644
index 613afce..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/ic_sysbar_home.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-hdpi/ic_sysbar_recent.png b/packages/SystemUI/res/drawable-hdpi/ic_sysbar_recent.png
deleted file mode 100644
index eb80426..0000000
Binary files a/packages/SystemUI/res/drawable-hdpi/ic_sysbar_recent.png and /dev/null differ
diff --git a/packages/SystemUI/res/drawable-xxxhdpi/ic_sysbar_home_carmode_pixel.png b/packages/SystemUI/res/drawable-xxxhdpi/ic_sysbar_home_carmode_pixel.png
new file mode 100644
index 0000000..60da8e4
Binary files /dev/null and b/packages/SystemUI/res/drawable-xxxhdpi/ic_sysbar_home_carmode_pixel.png differ
diff --git a/packages/SystemUI/res/drawable/halo.xml b/packages/SystemUI/res/drawable/halo.xml
new file mode 100644
index 0000000..7ca1596
--- /dev/null
+++ b/packages/SystemUI/res/drawable/halo.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape android:shape="ring" android:useLevel="false" android:innerRadius="@dimen/halo_inner_radius" android:thickness="@dimen/halo_thickness"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="#ffffffff" />
+    <size android:height="@dimen/halo_diameter" android:width="@dimen/halo_diameter" />
+</shape>
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_back.xml b/packages/SystemUI/res/drawable/ic_sysbar_back.xml
new file mode 100644
index 0000000..e9f704b
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_back.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2016 AICP
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="88"
+    android:viewportHeight="88">
+
+    <path
+        android:fillColor="@color/icon_color_back"
+        android:pathData="M64.55,12.62C67.66,10.72 72.05,13.33 71.99,16.94C72.12,35 72.01,53.07 72.05,71.13C71.97,73.99 69.63,75.84 67.01,76.34C64.39,75.81 62.34,74.16 60.02,72.95C46.32,65.08 32.64,57.17 18.9,49.36C15.15,47.63 15.09,41.57 18.78,39.72C34.03,30.68 49.26,21.61 64.55,12.62Z"/>
+</vector>
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_back_ime.xml b/packages/SystemUI/res/drawable/ic_sysbar_back_ime.xml
new file mode 100644
index 0000000..416b3c4
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_back_ime.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2016 AICP
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="88"
+    android:viewportHeight="88">
+
+    <path
+        android:fillColor="@color/icon_color_ime_switcher"
+        android:pathData="M16.11,16.11C34.41,15.87 52.74,16.05 71.05,16.02C74.76,15.94 77.25,20.45 75.4,23.61C66.61,39.03 57.76,54.44 48.87,69.8C46.91,72.92 42.05,72.85 39.97,69.88C30.84,54.46 21.66,39.05 12.58,23.61C10.99,20.69 12.76,16.63 16.11,16.11Z"/>
+</vector>
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_docked.xml b/packages/SystemUI/res/drawable/ic_sysbar_docked.xml
new file mode 100644
index 0000000..13424c1
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_docked.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2016 AICP
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="88"
+    android:viewportHeight="88">
+
+    <path
+        android:fillColor="@color/icon_color_split_screen"
+        android:pathData="M15.79,15.82C17.36,14.06 19.84,13.97 22.03,13.98C37.02,14.03 52.03,13.97 67.02,14.01C70.11,13.68 73.39,15.78 73.86,18.95C74.25,22.61 73.95,26.3 74.07,29.97C74,32.58 74.31,35.42 72.94,37.77C71.26,39.11 69.3,40.16 67.08,39.99C51.7,40.01 36.32,40.01 20.94,39.99C18.7,40.17 16.72,39.1 15.04,37.72C13.19,34.11 14.19,29.86 13.95,25.97C14.17,22.59 13.1,18.48 15.79,15.82Z"/>
+    <path
+        android:fillColor="@color/icon_color_split_screen"
+        android:pathData="M15.75,49.85C17.31,48.08 19.8,47.96 21.99,47.98C37.02,48.03 52.05,47.97 67.07,48.01C70.14,47.69 73.38,49.79 73.85,52.92C74.26,56.92 73.94,60.95 74.08,64.97C74,67.25 74.18,69.74 72.92,71.77C71.25,73.13 69.27,74.14 67.06,73.99C53.35,74.04 39.64,73.95 25.94,74.02C22.22,74 17.98,74.6 15.05,71.76C13.19,68.14 14.19,63.89 13.95,59.99C14.17,56.62 13.11,52.52 15.75,49.85Z"/>
+</vector>
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_home.xml b/packages/SystemUI/res/drawable/ic_sysbar_home.xml
new file mode 100644
index 0000000..9796dca
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_home.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2016 AICP
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="88"
+    android:viewportHeight="88">
+
+    <path
+        android:fillColor="@color/icon_color_home"
+        android:pathData="M36.51,4.74C45.95,2.92 56.04,4.65 64.3,9.59C72.73,14.55 79.23,22.7 82.14,32.05C85.29,41.99 84.33,53.16 79.47,62.4C74.78,71.46 66.52,78.59 56.84,81.84C46.91,85.26 35.63,84.52 26.24,79.8C16.87,75.16 9.46,66.72 6.14,56.8C2.49,46.17 3.63,34.02 9.25,24.28C14.92,14.22 25.14,6.85 36.51,4.74M37.44,8.62C30.81,9.84 24.55,12.99 19.61,17.58C7.96,27.98 4.61,46.27 11.84,60.12C18.84,74.62 36.3,82.95 51.97,79.08C68.67,75.61 81.26,58.97 79.91,41.93C79.36,30.58 72.96,19.77 63.38,13.7C55.79,8.78 46.32,6.96 37.44,8.62Z"/>
+    <path
+        android:fillColor="@color/icon_color_home"
+        android:pathData="M37.52,14.72C52.83,10.93 69.67,21.43 73.1,36.79C77.18,51.67 67.65,68.43 52.85,72.65C39.2,77.17 23.08,70.15 17.05,57.12C10.56,44.46 14.86,27.62 26.6,19.59C29.86,17.25 33.6,15.59 37.52,14.72Z"/>
+</vector>
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_opa_blue.xml b/packages/SystemUI/res/drawable/ic_sysbar_opa_blue.xml
new file mode 100644
index 0000000..0b989ec
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_opa_blue.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The Android Open Source Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<shape android:shape="oval"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <size android:height="@dimen/opa_dot_diam" android:width="@dimen/opa_dot_diam" />
+    <solid android:color="#ff4285f4" />
+</shape>
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_opa_green.xml b/packages/SystemUI/res/drawable/ic_sysbar_opa_green.xml
new file mode 100644
index 0000000..cc1d6eb
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_opa_green.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The Android Open Source Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<shape android:shape="oval"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <size android:height="@dimen/opa_dot_diam" android:width="@dimen/opa_dot_diam" />
+    <solid android:color="#ff34a853" />
+</shape>
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_opa_red.xml b/packages/SystemUI/res/drawable/ic_sysbar_opa_red.xml
new file mode 100644
index 0000000..7292e2f
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_opa_red.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The Android Open Source Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<shape android:shape="oval"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <size android:height="@dimen/opa_dot_diam" android:width="@dimen/opa_dot_diam" />
+    <solid android:color="#ffea4335" />
+</shape>
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_opa_yellow.xml b/packages/SystemUI/res/drawable/ic_sysbar_opa_yellow.xml
new file mode 100644
index 0000000..45aeba9
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_opa_yellow.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (C) 2016 The Android Open Source Project
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<shape android:shape="oval"
+  xmlns:android="http://schemas.android.com/apk/res/android">
+    <size android:height="@dimen/opa_dot_diam" android:width="@dimen/opa_dot_diam" />
+    <solid android:color="#fffbbc05" />
+</shape>
diff --git a/packages/SystemUI/res/drawable/ic_sysbar_recent.xml b/packages/SystemUI/res/drawable/ic_sysbar_recent.xml
new file mode 100644
index 0000000..ac078f6
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_sysbar_recent.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2016 AICP
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="88"
+    android:viewportHeight="88">
+
+    <path
+        android:fillColor="@color/icon_color_overview"
+        android:pathData="M14.01,19.99C13.73,16.72 16.63,13.75 19.92,14.03C35.29,13.94 50.66,14.06 66.03,13.97C68.2,14.01 70.73,13.86 72.33,15.61C74.13,17.21 74.01,19.77 74.06,21.97C74.03,36.98 74.05,52 74.06,67.02C73.99,68.58 73.87,70.18 73.32,71.65C71.62,73.28 69.39,74.21 67.01,74.02C51.66,73.99 36.3,73.99 20.95,74.02C18.54,74.22 16.33,73.23 14.61,71.59C13.88,69.13 13.9,66.54 13.93,64.01C14.03,49.34 13.86,34.66 14.01,19.99Z"/>
+</vector>
diff --git a/packages/SystemUI/res/layout/home.xml b/packages/SystemUI/res/layout/home.xml
index f11592d..da4b8a6 100644
--- a/packages/SystemUI/res/layout/home.xml
+++ b/packages/SystemUI/res/layout/home.xml
@@ -13,18 +13,16 @@
      See the License for the specific language governing permissions and
      limitations under the License.
 -->
-<com.android.systemui.statusbar.policy.KeyButtonView
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:systemui="http://schemas.android.com/apk/res-auto"
-    android:id="@+id/home"
-    android:layout_width="@dimen/navigation_key_width"
-    android:layout_height="match_parent"
-    android:layout_weight="0"
-    android:src="@drawable/ic_sysbar_home"
-    systemui:keyCode="3"
-    android:scaleType="center"
-    android:contentDescription="@string/accessibility_home"
-    android:paddingStart="@dimen/navigation_key_padding"
-    android:paddingEnd="@dimen/navigation_key_padding"
-    />
+<com.google.android.systemui.OpaLayout android:id="@+id/home" android:clipChildren="false" android:clipToPadding="false" android:layout_width="@dimen/navigation_key_width" android:layout_height="fill_parent" android:layout_weight="0.0" android:paddingStart="@dimen/navigation_key_padding" android:paddingEnd="@dimen/navigation_key_padding"
+  xmlns:android="http://schemas.android.com/apk/res/android" xmlns:systemui="http://schemas.android.com/apk/res-auto">
+    <RelativeLayout android:layout_width="fill_parent" android:layout_height="fill_parent">
+        <ImageView android:id="@+id/red" android:src="@drawable/ic_sysbar_opa_red" android:importantForAccessibility="no" style="@style/DotStyle" />
+        <ImageView android:id="@+id/blue" android:src="@drawable/ic_sysbar_opa_blue" android:importantForAccessibility="no" style="@style/DotStyle" />
+        <ImageView android:id="@+id/green" android:src="@drawable/ic_sysbar_opa_green" android:importantForAccessibility="no" style="@style/DotStyle" />
+        <ImageView android:id="@+id/yellow" android:src="@drawable/ic_sysbar_opa_yellow" android:importantForAccessibility="no" style="@style/DotStyle" />
+    </RelativeLayout>
+    <ImageView android:layout_gravity="center" android:id="@+id/white" android:layout_width="wrap_content" android:layout_height="wrap_content" android:src="@drawable/ic_sysbar_home" android:importantForAccessibility="no" />
+    <com.android.systemui.statusbar.policy.KeyButtonView android:layout_gravity="center" android:id="@+id/home_button" android:layout_width="@dimen/navigation_key_width" android:layout_height="fill_parent" android:scaleType="center" android:contentDescription="@string/accessibility_home" systemui:keyCode="3" />
+    <ImageView android:layout_gravity="center" android:id="@+id/halo" android:layout_width="wrap_content" android:layout_height="wrap_content" android:src="@drawable/halo" android:importantForAccessibility="no" />
+</com.google.android.systemui.OpaLayout>
 
diff --git a/packages/SystemUI/res/values/cm_colors.xml b/packages/SystemUI/res/values/cm_colors.xml
index d179ae0..1432fe8 100644
--- a/packages/SystemUI/res/values/cm_colors.xml
+++ b/packages/SystemUI/res/values/cm_colors.xml
@@ -22,4 +22,11 @@
 
     <!-- Status bar battery level text color -->
     <color name="status_bar_battery_level_text_color">#ffffff</color>
+
+	<!-- Custom Navbar Color -->
+    <color name="icon_color_back">@android:color/white</color>
+    <color name="icon_color_ime_switcher">@android:color/white</color>
+    <color name="icon_color_split_screen">@android:color/white</color>
+    <color name="icon_color_home">@android:color/white</color>
+    <color name="icon_color_overview">@android:color/white</color>
 </resources>
diff --git a/packages/SystemUI/res/values/cm_styles.xml b/packages/SystemUI/res/values/cm_styles.xml
index b582a7c..fcf81af 100644
--- a/packages/SystemUI/res/values/cm_styles.xml
+++ b/packages/SystemUI/res/values/cm_styles.xml
@@ -44,5 +44,12 @@
     <style name="BatteryMeterViewDrawable.Circle">
         <item name="blendMode">overlay</item>
     </style>
+	
+	<style name="DotStyle">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_centerHorizontal">true</item>
+        <item name="android:layout_centerVertical">true</item>
+    </style>
 
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index deea261..53ccaad 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -294,8 +294,7 @@ public class NavigationBarView extends LinearLayout implements TunerService.Tuna
         mBackCarModeIcon = new BackButtonDrawable(
                 ctx.getDrawable(R.drawable.ic_sysbar_back_carmode));
         mBackLandCarModeIcon = mBackCarModeIcon;
-        mHomeCarModeIcon = ctx.getDrawable(R.drawable.ic_sysbar_home_carmode);
-    }
+        mHomeCarModeIcon = ctx.getDrawable(R.drawable.ic_sysbar_home_carmode_pixel);    }
 
     private void updateIcons(Context ctx, Configuration oldConfig, Configuration newConfig) {
         if (oldConfig.orientation != newConfig.orientation
diff --git a/packages/SystemUI/src/com/google/android/systemui/Constants.java b/packages/SystemUI/src/com/google/android/systemui/Constants.java
new file mode 100644
index 0000000..d7e9512
--- /dev/null
+++ b/packages/SystemUI/src/com/google/android/systemui/Constants.java
@@ -0,0 +1,9 @@
+package com.google.android.systemui;
+
+public class Constants {
+
+    public static final String OPA_COMPONENT_NAME = "com.google.android.googlequicksearchbox/com.google.android.voiceinteraction.GsaVoiceInteractionService";
+    public static final String OPA_ENABLED = "OPA_ENABLED";
+    public static final String OPA_ENABLE_ACTION = "com.google.android.systemui.OPA_ENABLED";
+
+}
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/google/android/systemui/OpaLayout.java b/packages/SystemUI/src/com/google/android/systemui/OpaLayout.java
new file mode 100644
index 0000000..6ac6c9f
--- /dev/null
+++ b/packages/SystemUI/src/com/google/android/systemui/OpaLayout.java
@@ -0,0 +1,593 @@
+package com.google.android.systemui;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.os.SystemClock;
+import android.os.UserManager;
+import android.util.ArraySet;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
+import android.view.RenderNodeAnimator;
+import android.view.animation.Interpolator;
+import android.view.animation.PathInterpolator;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+
+import com.android.systemui.Interpolators;
+import com.android.systemui.R;
+import com.android.systemui.statusbar.phone.ButtonDispatcher;
+import com.android.systemui.statusbar.policy.KeyButtonView;
+
+public class OpaLayout extends FrameLayout implements ButtonDispatcher.ButtonInterface{
+
+    private static final int ANIMATION_STATE_NONE = 0;
+    private static final int ANIMATION_STATE_DIAMOND = 1;
+    private static final int ANIMATION_STATE_RETRACT = 2;
+    private static final int ANIMATION_STATE_OTHER = 3;
+
+    private static final int MIN_DIAMOND_DURATION = 100;
+    private static final int COLLAPSE_ANIMATION_DURATION_RY = 83;
+    private static final int COLLAPSE_ANIMATION_DURATION_BG = 100;
+    private static final int LINE_ANIMATION_DURATION_Y = 275;
+    private static final int LINE_ANIMATION_DURATION_X = 133;
+    private static final int RETRACT_ANIMATION_DURATION = 300;
+    private static final int DIAMOND_ANIMATION_DURATION = 200;
+    private static final int HALO_ANIMATION_DURATION = 100;
+
+    private static final int DOTS_RESIZE_DURATION = 200;
+    private static final int HOME_RESIZE_DURATION = 83;
+
+    private static final int HOME_REAPPEAR_ANIMATION_OFFSET = 33;
+    private static final int HOME_REAPPEAR_DURATION = 150;
+
+    private static final float DIAMOND_DOTS_SCALE_FACTOR = 0.8f;
+    private static final float DIAMOND_HOME_SCALE_FACTOR = 0.625f;
+    private static final float HALO_SCALE_FACTOR = 0.47619048f;
+
+    private KeyButtonView mHome;
+
+    private int mAnimationState;
+    private final ArraySet<Animator> mCurrentAnimators;
+
+    private boolean mIsLandscape;
+    private boolean mIsPressed;
+    private boolean mLongClicked;
+    private boolean mOpaEnabled;
+    private long mStartTime;
+
+    private View mRed;
+    private View mBlue;
+    private View mGreen;
+    private View mYellow;
+    private View mWhite;
+    private View mHalo;
+
+    private View mTop;
+    private View mRight;
+    private View mLeft;
+    private View mBottom;
+
+    private final Runnable mCheckLongPress;
+    private final Runnable mRetract;
+
+    private final Interpolator mRetractInterpolator;
+    private final Interpolator mCollapseInterpolator;
+    private final Interpolator mDiamondInterpolator;
+    private final Interpolator mDotsFullSizeInterpolator;
+    private final Interpolator mFastOutSlowInInterpolator;
+    private final Interpolator mHomeDisappearInterpolator;
+
+    public OpaLayout(Context context) {
+        super(context);
+        this.mFastOutSlowInInterpolator = Interpolators.FAST_OUT_SLOW_IN;
+        this.mHomeDisappearInterpolator = new PathInterpolator(0.8f, 0f, 1f, 1f);
+        this.mCollapseInterpolator = Interpolators.FAST_OUT_LINEAR_IN;
+        this.mDotsFullSizeInterpolator = new PathInterpolator(0.4f, 0f, 0f, 1f);
+        this.mRetractInterpolator = new PathInterpolator(0.4f, 0f, 0f, 1f);
+        this.mDiamondInterpolator = new PathInterpolator(0.2f, 0f, 0.2f, 1f);
+        this.mCheckLongPress = new Runnable() {
+            @Override
+            public void run() {
+                if (OpaLayout.this.mIsPressed) {
+                    OpaLayout.this.mLongClicked = true;
+                }
+            }
+        };
+        this.mRetract = new Runnable() {
+            @Override
+            public void run() {
+                OpaLayout.this.cancelCurrentAnimation();
+                OpaLayout.this.startRetractAnimation();
+            }
+        };
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_NONE;
+        this.mCurrentAnimators = new ArraySet<Animator>();
+    }
+
+    public OpaLayout(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        this.mFastOutSlowInInterpolator = Interpolators.FAST_OUT_SLOW_IN;
+        this.mHomeDisappearInterpolator = new PathInterpolator(0.8f, 0f, 1f, 1f);
+        this.mCollapseInterpolator = Interpolators.FAST_OUT_LINEAR_IN;
+        this.mDotsFullSizeInterpolator = new PathInterpolator(0.4f, 0f, 0f, 1f);
+        this.mRetractInterpolator = new PathInterpolator(0.4f, 0f, 0f, 1f);
+        this.mDiamondInterpolator = new PathInterpolator(0.2f, 0f, 0.2f, 1f);
+        this.mCheckLongPress = new Runnable() {
+            @Override
+            public void run() {
+                if (OpaLayout.this.mIsPressed) {
+                    OpaLayout.this.mLongClicked = true;
+                }
+            }
+        };
+        this.mRetract = new Runnable() {
+            @Override
+            public void run() {
+                OpaLayout.this.cancelCurrentAnimation();
+                OpaLayout.this.startRetractAnimation();
+            }
+        };
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_NONE;
+        this.mCurrentAnimators = new ArraySet<Animator>();
+    }
+
+    public OpaLayout(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        this.mFastOutSlowInInterpolator = Interpolators.FAST_OUT_SLOW_IN;
+        this.mHomeDisappearInterpolator = new PathInterpolator(0.8f, 0f, 1f, 1f);
+        this.mCollapseInterpolator = Interpolators.FAST_OUT_LINEAR_IN;
+        this.mDotsFullSizeInterpolator = new PathInterpolator(0.4f, 0f, 0f, 1f);
+        this.mRetractInterpolator = new PathInterpolator(0.4f, 0f, 0f, 1f);
+        this.mDiamondInterpolator = new PathInterpolator(0.2f, 0f, 0.2f, 1f);
+        this.mCheckLongPress = new Runnable() {
+            @Override
+            public void run() {
+                if (OpaLayout.this.mIsPressed) {
+                    OpaLayout.this.mLongClicked = true;
+                }
+            }
+        };
+        this.mRetract = new Runnable() {
+            @Override
+            public void run() {
+                OpaLayout.this.cancelCurrentAnimation();
+                OpaLayout.this.startRetractAnimation();
+            }
+        };
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_NONE;
+        this.mCurrentAnimators = new ArraySet<Animator>();
+    }
+
+    public OpaLayout(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        this.mFastOutSlowInInterpolator = Interpolators.FAST_OUT_SLOW_IN;
+        this.mHomeDisappearInterpolator = new PathInterpolator(0.8f, 0f, 1f, 1f);
+        this.mCollapseInterpolator = Interpolators.FAST_OUT_LINEAR_IN;
+        this.mDotsFullSizeInterpolator = new PathInterpolator(0.4f, 0f, 0f, 1f);
+        this.mRetractInterpolator = new PathInterpolator(0.4f, 0f, 0f, 1f);
+        this.mDiamondInterpolator = new PathInterpolator(0.2f, 0f, 0.2f, 1f);
+        this.mCheckLongPress = new Runnable() {
+            @Override
+            public void run() {
+                if (OpaLayout.this.mIsPressed) {
+                    OpaLayout.this.mLongClicked = true;
+                }
+            }
+        };
+        this.mRetract = new Runnable() {
+            @Override
+            public void run() {
+                OpaLayout.this.cancelCurrentAnimation();
+                OpaLayout.this.startRetractAnimation();
+            }
+        };
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_NONE;
+        this.mCurrentAnimators = new ArraySet<Animator>();
+    }
+
+    private void startAll(ArraySet<Animator> animators) {
+        for(int i=0; i < animators.size(); i++) {
+            Animator curAnim = (Animator) this.mCurrentAnimators.valueAt(i);
+            curAnim.start();
+        }
+    }
+
+    private void startCollapseAnimation() {
+        this.mCurrentAnimators.clear();
+        this.mCurrentAnimators.addAll(this.getCollapseAnimatorSet());
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_OTHER;
+        this.startAll(this.mCurrentAnimators);
+    }
+
+    private void startDiamondAnimation() {
+        this.mCurrentAnimators.clear();
+        this.mCurrentAnimators.addAll(this.getDiamondAnimatorSet());
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_DIAMOND;
+        this.startAll(this.mCurrentAnimators);
+    }
+
+    private void startLineAnimation() {
+        this.mCurrentAnimators.clear();
+        this.mCurrentAnimators.addAll(this.getLineAnimatorSet());
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_OTHER;
+        this.startAll(this.mCurrentAnimators);
+    }
+
+    private void startRetractAnimation() {
+        this.mCurrentAnimators.clear();
+        this.mCurrentAnimators.addAll(this.getRetractAnimatorSet());
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_RETRACT;
+        this.startAll(this.mCurrentAnimators);
+    }
+
+    private void cancelCurrentAnimation() {
+        if(this.mCurrentAnimators.isEmpty())
+            return;
+        for(int i=0; i < this.mCurrentAnimators.size(); i++) {
+            Animator curAnim = (Animator) this.mCurrentAnimators.valueAt(i);
+            curAnim.removeAllListeners();
+            curAnim.cancel();
+        }
+        this.mCurrentAnimators.clear();
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_NONE;
+    }
+
+    private void endCurrentAnimation() {
+        if(this.mCurrentAnimators.isEmpty())
+            return;
+        for(int i=0; i < this.mCurrentAnimators.size(); i++) {
+            Animator curAnim = (Animator) this.mCurrentAnimators.valueAt(i);
+            curAnim.removeAllListeners();
+            curAnim.end();
+        }
+        this.mCurrentAnimators.clear();
+        this.mAnimationState = OpaLayout.ANIMATION_STATE_NONE;
+    }
+
+    private ArraySet<Animator> getCollapseAnimatorSet() {
+        final ArraySet<Animator> set = new ArraySet<Animator>();
+        Animator animator;
+        if (this.mIsLandscape) {
+            animator = this.getDeltaAnimatorY(this.mRed, this.mCollapseInterpolator, -this.getPxVal(R.dimen.opa_line_x_collapse_ry), OpaLayout.COLLAPSE_ANIMATION_DURATION_RY);
+        }
+        else {
+            animator = this.getDeltaAnimatorX(this.mRed, this.mCollapseInterpolator, this.getPxVal(R.dimen.opa_line_x_collapse_ry), OpaLayout.COLLAPSE_ANIMATION_DURATION_RY);
+        }
+        set.add(animator);
+        set.add(this.getScaleAnimatorX(this.mRed, 1.0f, OpaLayout.DOTS_RESIZE_DURATION, this.mDotsFullSizeInterpolator));
+        set.add(this.getScaleAnimatorY(this.mRed, 1.0f, OpaLayout.DOTS_RESIZE_DURATION, this.mDotsFullSizeInterpolator));
+        Animator animator2;
+        if (this.mIsLandscape) {
+            animator2 = this.getDeltaAnimatorY(this.mBlue, this.mCollapseInterpolator, -this.getPxVal(R.dimen.opa_line_x_collapse_bg), OpaLayout.COLLAPSE_ANIMATION_DURATION_BG);
+        }
+        else {
+            animator2 = this.getDeltaAnimatorX(this.mBlue, this.mCollapseInterpolator, this.getPxVal(R.dimen.opa_line_x_collapse_bg), OpaLayout.COLLAPSE_ANIMATION_DURATION_BG);
+        }
+        set.add(animator2);
+        set.add(this.getScaleAnimatorX(this.mBlue, 1.0f, OpaLayout.DOTS_RESIZE_DURATION, this.mDotsFullSizeInterpolator));
+        set.add(this.getScaleAnimatorY(this.mBlue, 1.0f, OpaLayout.DOTS_RESIZE_DURATION, this.mDotsFullSizeInterpolator));
+        Animator animator3;
+        if (this.mIsLandscape) {
+            animator3 = this.getDeltaAnimatorY(this.mYellow, this.mCollapseInterpolator, this.getPxVal(R.dimen.opa_line_x_collapse_ry), OpaLayout.COLLAPSE_ANIMATION_DURATION_RY);
+        }
+        else {
+            animator3 = this.getDeltaAnimatorX(this.mYellow, this.mCollapseInterpolator, -this.getPxVal(R.dimen.opa_line_x_collapse_ry), OpaLayout.COLLAPSE_ANIMATION_DURATION_RY);
+        }
+        set.add(animator3);
+        set.add(this.getScaleAnimatorX(this.mYellow, 1.0f, OpaLayout.DOTS_RESIZE_DURATION, this.mDotsFullSizeInterpolator));
+        set.add(this.getScaleAnimatorY(this.mYellow, 1.0f, OpaLayout.DOTS_RESIZE_DURATION, this.mDotsFullSizeInterpolator));
+        Animator animator4;
+        if (this.mIsLandscape) {
+            animator4 = this.getDeltaAnimatorY(this.mGreen, this.mCollapseInterpolator, this.getPxVal(R.dimen.opa_line_x_collapse_bg), OpaLayout.COLLAPSE_ANIMATION_DURATION_BG);
+        }
+        else {
+            animator4 = this.getDeltaAnimatorX(this.mGreen, this.mCollapseInterpolator, -this.getPxVal(R.dimen.opa_line_x_collapse_bg), OpaLayout.COLLAPSE_ANIMATION_DURATION_BG);
+        }
+        set.add(animator4);
+        set.add(this.getScaleAnimatorX(this.mGreen, 1.0f, OpaLayout.DOTS_RESIZE_DURATION, this.mDotsFullSizeInterpolator));
+        set.add(this.getScaleAnimatorY(this.mGreen, 1.0f, OpaLayout.DOTS_RESIZE_DURATION, this.mDotsFullSizeInterpolator));
+        final Animator scaleAnimatorX = this.getScaleAnimatorX(this.mWhite, 1.0f, OpaLayout.HOME_REAPPEAR_DURATION, this.mFastOutSlowInInterpolator);
+        final Animator scaleAnimatorY = this.getScaleAnimatorY(this.mWhite, 1.0f, OpaLayout.HOME_REAPPEAR_DURATION, this.mFastOutSlowInInterpolator);
+        final Animator scaleAnimatorX2 = this.getScaleAnimatorX(this.mHalo, 1.0f, OpaLayout.HOME_REAPPEAR_DURATION, this.mFastOutSlowInInterpolator);
+        final Animator scaleAnimatorY2 = this.getScaleAnimatorY(this.mHalo, 1.0f, OpaLayout.HOME_REAPPEAR_DURATION, this.mFastOutSlowInInterpolator);
+        scaleAnimatorX.setStartDelay(OpaLayout.HOME_REAPPEAR_ANIMATION_OFFSET);
+        scaleAnimatorY.setStartDelay(OpaLayout.HOME_REAPPEAR_ANIMATION_OFFSET);
+        scaleAnimatorX2.setStartDelay(OpaLayout.HOME_REAPPEAR_ANIMATION_OFFSET);
+        scaleAnimatorY2.setStartDelay(OpaLayout.HOME_REAPPEAR_ANIMATION_OFFSET);
+        set.add(scaleAnimatorX);
+        set.add(scaleAnimatorY);
+        set.add(scaleAnimatorX2);
+        set.add(scaleAnimatorY2);
+        this.getLongestAnim((set)).addListener((Animator.AnimatorListener)new AnimatorListenerAdapter() {
+            public void onAnimationEnd(final Animator animator) {
+                OpaLayout.this.mCurrentAnimators.clear();
+                OpaLayout.this.mAnimationState = OpaLayout.ANIMATION_STATE_NONE;
+            }
+        });
+        return set;
+    }
+
+    private ArraySet<Animator> getDiamondAnimatorSet() {
+        final ArraySet<Animator> set = new ArraySet<Animator>();
+        set.add(this.getDeltaAnimatorY(this.mTop, this.mDiamondInterpolator, -this.getPxVal(R.dimen.opa_diamond_translation), OpaLayout.DIAMOND_ANIMATION_DURATION));
+        set.add(this.getScaleAnimatorX(this.mTop, OpaLayout.DIAMOND_DOTS_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorY(this.mTop, OpaLayout.DIAMOND_DOTS_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getDeltaAnimatorY(this.mBottom, this.mDiamondInterpolator, this.getPxVal(R.dimen.opa_diamond_translation), OpaLayout.DIAMOND_ANIMATION_DURATION));
+        set.add(this.getScaleAnimatorX(this.mBottom, OpaLayout.DIAMOND_DOTS_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorY(this.mBottom, OpaLayout.DIAMOND_DOTS_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getDeltaAnimatorX(this.mLeft, this.mDiamondInterpolator, -this.getPxVal(R.dimen.opa_diamond_translation), OpaLayout.DIAMOND_ANIMATION_DURATION));
+        set.add(this.getScaleAnimatorX(this.mLeft, OpaLayout.DIAMOND_DOTS_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorY(this.mLeft, OpaLayout.DIAMOND_DOTS_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getDeltaAnimatorX(this.mRight, this.mDiamondInterpolator, this.getPxVal(R.dimen.opa_diamond_translation), OpaLayout.DIAMOND_ANIMATION_DURATION));
+        set.add(this.getScaleAnimatorX(this.mRight, OpaLayout.DIAMOND_DOTS_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorY(this.mRight, OpaLayout.DIAMOND_DOTS_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorX(this.mWhite, OpaLayout.DIAMOND_HOME_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorY(this.mWhite, OpaLayout.DIAMOND_HOME_SCALE_FACTOR, OpaLayout.DIAMOND_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorX(this.mHalo, OpaLayout.HALO_SCALE_FACTOR, OpaLayout.MIN_DIAMOND_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorY(this.mHalo, OpaLayout.HALO_SCALE_FACTOR, OpaLayout.MIN_DIAMOND_DURATION, this.mFastOutSlowInInterpolator));
+        this.getLongestAnim(set).addListener((Animator.AnimatorListener)new AnimatorListenerAdapter() {
+            public void onAnimationCancel(final Animator animator) {
+                OpaLayout.this.mCurrentAnimators.clear();
+            }
+
+            public void onAnimationEnd(final Animator animator) {
+                OpaLayout.this.startLineAnimation();
+            }
+        });
+        return set;
+    }
+
+    private ArraySet<Animator> getLineAnimatorSet() {
+        final ArraySet<Animator> set = new ArraySet<Animator>();
+        if (this.mIsLandscape) {
+            set.add(this.getDeltaAnimatorY(this.mRed, this.mFastOutSlowInInterpolator, this.getPxVal(R.dimen.opa_line_x_trans_ry), OpaLayout.LINE_ANIMATION_DURATION_Y));
+            set.add(this.getDeltaAnimatorX(this.mRed, this.mFastOutSlowInInterpolator, this.getPxVal(R.dimen.opa_line_y_translation), OpaLayout.LINE_ANIMATION_DURATION_X));
+            set.add(this.getDeltaAnimatorY(this.mBlue, this.mFastOutSlowInInterpolator, this.getPxVal(R.dimen.opa_line_x_trans_bg), OpaLayout.LINE_ANIMATION_DURATION_Y));
+            set.add(this.getDeltaAnimatorY(this.mYellow, this.mFastOutSlowInInterpolator, -this.getPxVal(R.dimen.opa_line_x_trans_ry), OpaLayout.LINE_ANIMATION_DURATION_Y));
+            set.add(this.getDeltaAnimatorX(this.mYellow, this.mFastOutSlowInInterpolator, -this.getPxVal(R.dimen.opa_line_y_translation), OpaLayout.LINE_ANIMATION_DURATION_X));
+            set.add(this.getDeltaAnimatorY(this.mGreen, this.mFastOutSlowInInterpolator, -this.getPxVal(R.dimen.opa_line_x_trans_bg), OpaLayout.LINE_ANIMATION_DURATION_Y));
+        }
+        else {
+            set.add(this.getDeltaAnimatorX(this.mRed, this.mFastOutSlowInInterpolator, -this.getPxVal(R.dimen.opa_line_x_trans_ry), OpaLayout.LINE_ANIMATION_DURATION_Y));
+            set.add(this.getDeltaAnimatorY(this.mRed, this.mFastOutSlowInInterpolator, this.getPxVal(R.dimen.opa_line_y_translation), OpaLayout.LINE_ANIMATION_DURATION_X));
+            set.add(this.getDeltaAnimatorX(this.mBlue, this.mFastOutSlowInInterpolator, -this.getPxVal(R.dimen.opa_line_x_trans_bg), OpaLayout.LINE_ANIMATION_DURATION_Y));
+            set.add(this.getDeltaAnimatorX(this.mYellow, this.mFastOutSlowInInterpolator, this.getPxVal(R.dimen.opa_line_x_trans_ry), OpaLayout.LINE_ANIMATION_DURATION_Y));
+            set.add(this.getDeltaAnimatorY(this.mYellow, this.mFastOutSlowInInterpolator, -this.getPxVal(R.dimen.opa_line_y_translation), OpaLayout.LINE_ANIMATION_DURATION_X));
+            set.add(this.getDeltaAnimatorX(this.mGreen, this.mFastOutSlowInInterpolator, this.getPxVal(R.dimen.opa_line_x_trans_bg), OpaLayout.LINE_ANIMATION_DURATION_Y));
+        }
+        set.add(this.getScaleAnimatorX(this.mWhite, 0.0f, OpaLayout.HOME_RESIZE_DURATION, this.mHomeDisappearInterpolator));
+        set.add(this.getScaleAnimatorY(this.mWhite, 0.0f, OpaLayout.HOME_RESIZE_DURATION, this.mHomeDisappearInterpolator));
+        set.add(this.getScaleAnimatorX(this.mHalo, 0.0f, OpaLayout.HOME_RESIZE_DURATION, this.mHomeDisappearInterpolator));
+        set.add(this.getScaleAnimatorY(this.mHalo, 0.0f, OpaLayout.HOME_RESIZE_DURATION, this.mHomeDisappearInterpolator));
+        this.getLongestAnim(set).addListener((Animator.AnimatorListener)new AnimatorListenerAdapter() {
+            public void onAnimationCancel(final Animator animator) {
+                OpaLayout.this.mCurrentAnimators.clear();
+            }
+
+            public void onAnimationEnd(final Animator animator) {
+                OpaLayout.this.startCollapseAnimation();
+            }
+        });
+        return set;
+    }
+
+    private ArraySet<Animator> getRetractAnimatorSet() {
+        final ArraySet<Animator> set = new ArraySet<Animator>();
+        set.add(this.getTranslationAnimatorX(this.mRed, this.mRetractInterpolator, OpaLayout.RETRACT_ANIMATION_DURATION));
+        set.add(this.getTranslationAnimatorY(this.mRed, this.mRetractInterpolator, OpaLayout.RETRACT_ANIMATION_DURATION));
+        set.add(this.getScaleAnimatorX(this.mRed, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getScaleAnimatorY(this.mRed, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getTranslationAnimatorX(this.mBlue, this.mRetractInterpolator, OpaLayout.RETRACT_ANIMATION_DURATION));
+        set.add(this.getTranslationAnimatorY(this.mBlue, this.mRetractInterpolator, OpaLayout.RETRACT_ANIMATION_DURATION));
+        set.add(this.getScaleAnimatorX(this.mBlue, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getScaleAnimatorY(this.mBlue, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getTranslationAnimatorX(this.mGreen, this.mRetractInterpolator, OpaLayout.RETRACT_ANIMATION_DURATION));
+        set.add(this.getTranslationAnimatorY(this.mGreen, this.mRetractInterpolator, OpaLayout.RETRACT_ANIMATION_DURATION));
+        set.add(this.getScaleAnimatorX(this.mGreen, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getScaleAnimatorY(this.mGreen, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getTranslationAnimatorX(this.mYellow, this.mRetractInterpolator, OpaLayout.RETRACT_ANIMATION_DURATION));
+        set.add(this.getTranslationAnimatorY(this.mYellow, this.mRetractInterpolator, OpaLayout.RETRACT_ANIMATION_DURATION));
+        set.add(this.getScaleAnimatorX(this.mYellow, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getScaleAnimatorY(this.mYellow, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getScaleAnimatorX(this.mWhite, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getScaleAnimatorY(this.mWhite, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mRetractInterpolator));
+        set.add(this.getScaleAnimatorX(this.mHalo, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        set.add(this.getScaleAnimatorY(this.mHalo, 1.0f, OpaLayout.RETRACT_ANIMATION_DURATION, this.mFastOutSlowInInterpolator));
+        this.getLongestAnim(set).addListener((Animator.AnimatorListener)new AnimatorListenerAdapter() {
+            public void onAnimationEnd(final Animator animator) {
+                OpaLayout.this.mCurrentAnimators.clear();
+                OpaLayout.this.mAnimationState = OpaLayout.ANIMATION_STATE_NONE;
+            }
+        });
+        return set;
+    }
+
+    private float getPxVal(int id) {
+        return this.getResources().getDimensionPixelOffset(id);
+    }
+
+    private Animator getDeltaAnimatorX(View v, Interpolator interpolator, float deltaX, int duration) {
+        RenderNodeAnimator anim = new RenderNodeAnimator(8, (int) (v.getX() + deltaX));
+        anim.setTarget(v);
+        anim.setInterpolator(interpolator);
+        anim.setDuration(duration);
+        return anim;
+    }
+
+    private Animator getDeltaAnimatorY(View v, Interpolator interpolator, float deltaY, int duration) {
+        RenderNodeAnimator anim = new RenderNodeAnimator(9, (int) (v.getY() + deltaY));
+        anim.setTarget(v);
+        anim.setInterpolator(interpolator);
+        anim.setDuration(duration);
+        return anim;
+    }
+
+    private Animator getScaleAnimatorX(View v, float factor, int duration, Interpolator interpolator) {
+        RenderNodeAnimator anim = new RenderNodeAnimator(3, factor);
+        anim.setTarget(v);
+        anim.setInterpolator(interpolator);
+        anim.setDuration(duration);
+        return anim;
+    }
+
+    private Animator getScaleAnimatorY(View v, float factor, int duration, Interpolator interpolator) {
+        RenderNodeAnimator anim = new RenderNodeAnimator(4, factor);
+        anim.setTarget(v);
+        anim.setInterpolator(interpolator);
+        anim.setDuration(duration);
+        return anim;
+    }
+
+    private Animator getTranslationAnimatorX(View v, Interpolator interpolator, int duration) {
+        RenderNodeAnimator anim = new RenderNodeAnimator(0, 0);
+        anim.setTarget(v);
+        anim.setInterpolator(interpolator);
+        anim.setDuration(duration);
+        return anim;
+    }
+
+    private Animator getTranslationAnimatorY(View v, Interpolator interpolator, int duration) {
+        RenderNodeAnimator anim = new RenderNodeAnimator(1, 0);
+        anim.setTarget(v);
+        anim.setInterpolator(interpolator);
+        anim.setDuration(duration);
+        return anim;
+    }
+
+    private Animator getLongestAnim(ArraySet<Animator> animators) {
+        long longestDuration = -1;
+        Animator longestAnim = null;
+
+        for(int i=0; i < animators.size(); i++) {
+            Animator a = (Animator) animators.valueAt(i);
+            if(a.getTotalDuration() > longestDuration) {
+                longestDuration = a.getTotalDuration();
+                longestAnim = a;
+            }
+        }
+        return longestAnim;
+    }
+
+    public void abortCurrentGesture() {
+        this.mHome.abortCurrentGesture();
+    }
+
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+
+        mRed = this.findViewById(R.id.red);
+        mBlue = this.findViewById(R.id.blue);
+        mYellow = this.findViewById(R.id.yellow);
+        mGreen = this.findViewById(R.id.green);
+        mWhite = this.findViewById(R.id.white);
+        mHalo = this.findViewById(R.id.halo);
+        mHome = (KeyButtonView) this.findViewById(R.id.home_button);
+
+        this.setOpaEnabled(true);
+    }
+
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        if (!this.mOpaEnabled) {
+            return false;
+        }
+        switch (ev.getAction()) {
+            case 0: {
+                if (!this.mCurrentAnimators.isEmpty()) {
+                    if (this.mAnimationState != OpaLayout.ANIMATION_STATE_RETRACT) {
+                        return false;
+                    }
+                    this.endCurrentAnimation();
+                }
+                this.mStartTime = SystemClock.elapsedRealtime();
+                this.mLongClicked = false;
+                this.mIsPressed = true;
+                this.startDiamondAnimation();
+                this.removeCallbacks(this.mCheckLongPress);
+                this.postDelayed(this.mCheckLongPress, (long)ViewConfiguration.getLongPressTimeout());
+                return false;
+            }
+            case 1:
+            case 3: {
+                if (this.mAnimationState == OpaLayout.ANIMATION_STATE_DIAMOND) {
+                    final long elapsedRealtime = SystemClock.elapsedRealtime();
+                    final long mStartTime = this.mStartTime;
+                    this.removeCallbacks(this.mRetract);
+                    this.postDelayed(this.mRetract, 100L - (elapsedRealtime - mStartTime));
+                    this.removeCallbacks(this.mCheckLongPress);
+                    return false;
+                }
+                int n;
+                if (!this.mIsPressed || this.mLongClicked) {
+                    n = 0;
+                }
+                else {
+                    n = 1;
+                }
+                this.mIsPressed = false;
+                if (n != 0) {
+                    this.mRetract.run();
+                    return false;
+                }
+                break;
+            }
+        }
+        return false;
+    }
+
+    public void setCarMode(boolean carMode) {
+        this.setOpaEnabled(!carMode);
+    }
+
+    public void setImageDrawable(Drawable drawable) {
+        ((ImageView) mWhite).setImageDrawable(drawable);
+    }
+
+    public void setImageResource(int resId) {
+        ((ImageView) mWhite).setImageResource(resId);
+    }
+
+    public void setLandscape(boolean landscape) {
+        this.mIsLandscape = mIsLandscape;
+        if (this.mIsLandscape) {
+            this.mTop = this.mGreen;
+            this.mBottom = this.mBlue;
+            this.mRight = this.mYellow;
+            this.mLeft = this.mRed;
+            return;
+        }
+        this.mTop = this.mRed;
+        this.mBottom = this.mYellow;
+        this.mLeft = this.mBlue;
+        this.mRight = this.mGreen;
+    }
+
+    public void setOnLongClickListener(View.OnLongClickListener l) {
+        mHome.setOnLongClickListener(l);
+    }
+
+    public void setOnTouchListener(View.OnTouchListener l) {
+        mHome.setOnTouchListener(l);
+    }
+
+    public void setOpaEnabled(boolean enabled) {
+        final boolean b2 = enabled || UserManager.isDeviceInDemoMode(this.getContext());
+        this.mOpaEnabled = true;
+        int visibility;
+        if (b2) {
+            visibility = View.VISIBLE;
+        }
+        else {
+            visibility = View.INVISIBLE;
+        }
+        this.mBlue.setVisibility(visibility);
+        this.mRed.setVisibility(visibility);
+        this.mYellow.setVisibility(visibility);
+        this.mGreen.setVisibility(visibility);
+        this.mHalo.setVisibility(visibility);
+    }
+
+}
\ No newline at end of file
